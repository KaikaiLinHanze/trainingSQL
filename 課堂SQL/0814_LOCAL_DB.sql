
-- 針對"加總後"的各別商店營業額做"條件篩選"
-- 對函數產生的值來設定條件查尋
-- SELECT → FROUM → WHERE → GROUP BY → Function → HAVING → ORDER BY
SELECT STORE_NAME, SUM(SALES)
FROM STORE_INFORMATION
WHERE SALES > 0
GROUP BY STORE_NAME
HAVING SUM(SALES) >= 3000
ORDER BY SUM(SALES) DESC;


-- 計算和統計「個別商店」的以下三項資料：
-- 「總合營業額」、「商店資料個數」、「平均營業額」
-- 搜尋或排除條件如下：
-- 排除「平均營業額」1000(含)以下的商店資料
-- 排除「商店資料個數」1(含)個以下的商店資料
-- 依照「平均營業額」由大至小排序
SELECT STORE_NAME, SUM(SALES), COUNT(STORE_ID), AVG(SALES)
FROM STORE_INFORMATION
GROUP BY STORE_NAME
HAVING AVG(SALES) > 1000 AND COUNT(STORE_ID) > 1
ORDER BY AVG(SALES) DESC;

-- 1.欄位別名建議加上"雙引號"
-- 2.AS可省略
-- 3."雙引號"可省略,但是別名之中不能有空白
SELECT STORE_NAME AS "商店名稱"
FROM STORE_INFORMATION;

SELECT STORE_NAME "商店名稱"
FROM STORE_INFORMATION;

SELECT STORE_NAME 商店名稱
FROM STORE_INFORMATION;


SELECT STORE_NAME, COUNT(STORE_ID),
	GROUP_CONCAT(SALES ORDER BY SALES DESC SEPARATOR '/') AS "LIST_SALES"
FROM STORE_INFORMATION
GROUP BY STORE_NAME;

-- 表格別名
-- 1.不須加 AS
-- 2.不須"雙引號"
-- 3.經由表格別名來選出欄位
-- 4.可明確知道來源的資料表
SELECT S.STORE_NAME
FROM STORE_INFORMATION S;


-- Join 表格連接
-- 1:2筆
-- 2:6筆
-- null:1筆

-- 9
SELECT STORE_ID,STORE_NAME, SALES, GEOGRAPHY_ID
FROM STORE_INFORMATION;

-- 3
SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY;

-- 27 (迪卡兒乘積)
-- 表格與表格之間"關聯性"
SELECT S.STORE_ID, S.STORE_NAME, S.SALES,
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM STORE_INFORMATION S, GEOGRAPHY G
--  表格連結 Join
WHERE S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

-- 1.INNER JOIN 接續必須接 ON
-- 2.INNER 可省略
-- 3.內部連接
SELECT S.STORE_ID, S.STORE_NAME, S.SALES,
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM STORE_INFORMATION S INNER JOIN GEOGRAPHY G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

-- 一個區域可以多間商店(一對多關係)
-- 一個商店可以屬於區域(多對一關係)
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 列出全部的"區域"，不論區域底下是否有所屬商店
-- 外部連接 OUTER 可省略
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G LEFT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


-- 列出全部的"商店"，不論商店是否有所屬區域
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G RIGHT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- MySQL不支援 FULL JOIN
-- MS SQL、Oracle 皆支援
-- 列出全部的"區域"、"商店"
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G FULL JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- FULL JOIN MySQL須透過 UNION 的方式，聯集 LEFT JOIN、RIGHT JOIN 結合
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
UNION -- 聯集
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G RIGHT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- Page:92(SQL JOINS Type) 表格連接的所有種類
SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.STORE_ID IS NULL;


SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G RIGHT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL;


SELECT G.GEOGRAPHY_ID, G.REGION_NAME,
	S.STORE_ID, S.STORE_NAME, S.SALES
FROM GEOGRAPHY G FULL JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.STORE_ID IS NULL
OR G.GEOGRAPHY_ID IS NULL;


-- 查詢各區域的營業額總計
-- 資料結果依營業額總計由大到小排序
-- (不論該區域底下是否有所屬商店)






