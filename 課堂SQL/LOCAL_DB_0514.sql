-- 計算和統計「個別商店」的以下三項資料：
-- 「總合營業額」、「商店資料個數」、「平均營業額」
-- 搜尋或排除條件如下：
-- 排除「平均營業額」1000(含)以下的商店資料
-- 排除「商店資料個數」1(含)個以下的商店資料
-- 依照「平均營業額」由大至小排序

SELECT STORE_NAME, SUM(SALES), COUNT(STORE_ID), AVG(SALES) 
FROM store_information
GROUP BY STORE_NAME
HAVING SUM(SALES)>1000 AND COUNT(STORE_ID)>1
ORDER BY AVG(SALES) DESC;

-- 欄位別名
-- 1.AS可以省略不寫
-- 2.別名使用"雙引號"(可省略但不可包含空白)
SELECT STORE_NAME, 
	COUNT(STORE_ID) AS "STORE COUNT",
	GROUP_CONCAT(SALES ORDER BY SALES DESC SEPARATOR '/') 營業額清單
FROM STORE_INFORMATION
GROUP BY STORE_NAME;

-- 表格別名
SELECT S.STORE_ID , S.STORE_NAME, S.STORE_DATE
FROM STORE_INFORMATION S;

-- 3筆
SELECT * FROM GEOGRAPHY;
-- 9筆
SELECT * FROM STORE_INFORMATION;

-- 27筆(交錯相乘的查詢組合結果)
SELECT G.*, S.*
FROM GEOGRAPHY G, STORE_INFORMATION S;

-- Cross Join
SELECT G.*, S.*
FROM GEOGRAPHY G, STORE_INFORMATION S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 內連結(INNER 可省略不寫)交集
-- INNER JOIN(表格名稱)...ON(連接欄位名稱)
SELECT G.*, S.*
FROM GEOGRAPHY G INNER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
ORDER BY S.STORE_ID;

-- 外連結(LEFT OUTER JOIN,OUTER可省略不寫)
SELECT G.*, S.*
FROM GEOGRAPHY G LEFT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 外連結(RIGHT OUTER JOIN,OUTER可省略不寫)
SELECT G.*, S.*
FROM GEOGRAPHY G RIGHT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 全連結(FULL OUTER JOIN MySQL不支援)聯集
SELECT G.*, S.*
FROM GEOGRAPHY G FULL OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

SELECT G.*, S.*
FROM GEOGRAPHY G LEFT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL;


SELECT G.*, S.*
FROM GEOGRAPHY G RIGHT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL;


SELECT G.*, S.*
FROM GEOGRAPHY G FULL OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL
OR S.GEOGRAPHY_ID IS NULL;


-- 查詢各區域的營業額總計
-- 資料結果依營業額總計由大到小排序
-- (不論該區域底下是否有所屬商店)
SELECT G.*, S.*
FROM GEOGRAPHY G LEFT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
GROUP BY REGION_NAME;


-- 查詢各區域的商店個數
-- 資料結果依區域的商店個數由大至小排序
-- (依據商店名稱,不包含重覆的商店)
-- (不論該區域底下是否有所屬商店)









